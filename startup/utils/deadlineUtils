import os
import subprocess
from tempfile import NamedTemporaryFile

def get_deadline_command():
    #finds the deadlinecommand executable
    deadline_bin = os.environ.get('DEADLINE_PATH', '')
    if deadline_bin:
        return os.path.join(deadline_bin, "deadlinecommand")
    #other search paths if needed
    raise RuntimeError("DEADLINE_PATH environment variable not set")

def submit_to_deadline(job_info, plugin_info, job_dependencies=[]):

    #submits a job to Deadline by creating job and plugin files
    
    #job_info (dict): dictionary with job properties (e.g., Name, Plugin, Frames)
    #plugin_info (dict): dictionary with plugin-specific properties
  
    #create the job info file
    job_file = NamedTemporaryFile(delete=False, mode='w', suffix='.job')
    for key, value in job_info.items():
        job_file.write(f"{key}={value}\n")
    job_file.close()

    #create the plugin info file
    plugin_file = NamedTemporaryFile(delete=False, mode='w', suffix='.job')
    for key, value in plugin_info.items():
        plugin_file.write(f"{key}={value}\n")
    plugin_file.close()

    # Get the deadline command 
    deadline_command = get_deadline_command()

    #command line arguments
    args = [deadline_command]
    if job_dependencies:
        args.append(f"-dependsonjob {','.join(job_dependencies)}")
    
    args.append(job_file.name)
    args.append(plugin_file.name)

    #submission command
    try:
        result = subprocess.run(args, capture_output=True, text=True, check=True)
        print("Successfully submitted job to Deadline.")
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print("Error submitting job to Deadline:")
        print(e.stderr)
    finally:
        #delete temp files
        os.remove(job_file.name)
        os.remove(plugin_file.name)